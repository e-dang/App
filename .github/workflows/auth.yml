name: Auth

env:
  DOCKER_BUILDKIT: 1
  CLUSTER_NAME: dev
  RESOURCE_GROUP: dev-stack
  DIRECTORY: backend/auth

on:
  pull_request:
    branches:
      - main
    paths:
      - backend/auth/**
      - .github/workflows/auth.yml
  push:
    branches:
      - main
    paths:
      - backend/auth/**
      - .github/workflows/auth.yml
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v2

      - name: Install and Run Pre-commit
        uses: pre-commit/action@v2.0.3

  unit-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v2

      - name: Setup yarn
        uses: actions/setup-node@v2
        with:
          node-version: '17.1.x'

      - name: Install dependencies
        run: cd ${DIRECTORY} && yarn install

      - name: Unit test
        run: cd ${DIRECTORY} && yarn test:unit

  integration-test:
    runs-on: ubuntu-latest
    services:
      # Label used to access the service container
      tracker-dev.postgres.database.azure.com:
        image: postgres:13.4
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v2

      - name: Setup yarn
        uses: actions/setup-node@v2
        with:
          node-version: '17.1.x'

      - name: Install sshfs
        run: |
          sudo apt-get install -y sshfs fuse
          echo user_allow_other | sudo tee -a /etc/fuse.conf

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Install telepresence
        run: |
          sudo curl -fL https://app.getambassador.io/download/tel2/linux/amd64/latest/telepresence -o /usr/local/bin/telepresence && \
          sudo chmod +x /usr/local/bin/telepresence

      - name: Install kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: 'latest'

      - name: Login to azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Connect to cluster context
        run: |
          az aks get-credentials -n ${CLUSTER_NAME} --resource-group ${RESOURCE_GROUP} --admin
          telepresence connect
          telepresence loglevel debug

      - name: Build docker image
        run: cd ${DIRECTORY} && yarn build

      - name: output docker networks
        run: docker network ls

      - name: Create env file
        run: |
          echo "dbName=test\ndbUser=postgres\ndbPassword=postgres" > ${DIRECTORY}/.env

      - name: Integration tests
        run: cd ${DIRECTORY} && yarn test:int:ci

      - name: Output logs
        if: always()
        run: |
          ls -la ~/.cache
          ls -la ~/.cache/telepresence
          ls -la ~/.cache/telepresence/logs
          cat ~/.cache/telepresence/logs/connector.log
          cat ~/.cache/telepresence/logs/daemon.log

  push-staging:
    needs:
      - lint
      - unit-test
      - integration-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Generate tag
        id: tag
        run: |
          sha=${GITHUB_SHA::8}
          ts=$(date +%s)
          echo "::set-output name=TAG::dev-${sha}-${ts}"

      - name: Build docker image
        run: cd ${DIRECTORY} && yarn build:ci
        env:
          TAG: ${{ steps.tag.outputs.TAG }}

      - name: Push staging docker image
        run: |
          docker tag ericdang/auth:prod ericdang/auth:${{ steps.tag.outputs.TAG }}
          docker push ericdang/auth:${{ steps.tag.outputs.TAG }}
